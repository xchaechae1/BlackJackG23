/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package BlackJackGUI.model;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import org.apache.derby.drda.NetworkServerControl;
import java.io.PrintWriter;
import java.net.InetAddress;


/**
 *
 * @author nicho
 */
public final class DBManager {
    private static final String URL = "jdbc:derby://localhost:1527/BlackJack;create=true"; //db
    private static final String USER_NAME = "pdc"; //db username
    private static final String PASSWORD = "pdc"; //db password

    private Connection conn; //db connection object
    private NetworkServerControl derbyServer; //derby server instance

    public DBManager() {
        initializeDatabase(); //initialize db on creation
        debugDatabaseInfo(); // Add this line
    }

    public Connection getConnection() {
        return this.conn; //return db connection
    }

    
    public void initializeDatabase() {
        System.out.println("Initializing network database...");
        
        try {
            //first try to start derby network server
            if (startDerbyServer()) {
                //load derby client driver
                Class.forName("org.apache.derby.jdbc.ClientDriver");
                System.out.println("Derby client driver loaded");
                
                //create connection to network server
                conn = DriverManager.getConnection(URL, USER_NAME, PASSWORD);
                System.out.println("Connected to network database: " + URL);
                
                ensureAllTablesExist(); //create tables if non-existant
                testDatabase(); //test db functionality
            } else {
                showErrorDialog("Failed to start Derby network server.\nPlease make sure port 1527 is available.");
            }
            
        } catch (ClassNotFoundException e) {
            showErrorDialog("Derby client driver not found.\nMake sure derbyclient.jar and derbynet.jar are in your classpath.");
            e.printStackTrace();
        } catch (SQLException e) {
            showErrorDialog("Database connection failed!\n\nPlease make sure:\n1. Port 1527 is available\n2. No other Derby server is running\n\nError: " + e.getMessage());
            e.printStackTrace();
        }
    }

    //automatically start derby network server generated by ChatGPT
    private boolean startDerbyServer() {
        try {
            System.out.println("Starting Derby network server on port 1527...");
            
            //create and start derby network server
            derbyServer = new NetworkServerControl(InetAddress.getByName("localhost"), 1527);
            derbyServer.start(new PrintWriter(System.out));
            
            //wait for server to initialize
            Thread.sleep(3000);
            
            //ping server to confirm it's running
            derbyServer.ping();
            
            System.out.println("Derby network server started successfully");
            return true;
            
        } catch (Exception e) {
            System.err.println("Failed to start Derby server: " + e.getMessage());
            
            //check if server is already running
            if (isServerAlreadyRunning()) {
                System.out.println("Derby server appears to be already running");
                return true;
            }
            return false;
        }
    }

    //check if derby server is already running
    private boolean isServerAlreadyRunning() {
        try {
            //try to connect to existing server
            Class.forName("org.apache.derby.jdbc.ClientDriver");
            Connection testConn = DriverManager.getConnection(URL, USER_NAME, PASSWORD);
            testConn.close();
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    //shutdown derby server when application closes
    public void shutdown() {
        try {
            if (conn != null && !conn.isClosed()) {
                conn.close(); //close database connection
                System.out.println("Database connection closed");
            }
            
            if (derbyServer != null) {
                derbyServer.shutdown(); //shutdown derby server
                System.out.println("Derby network server stopped");
            }
        } catch (Exception e) {
            System.err.println("Error during shutdown: " + e.getMessage());
        }
    }

    private void ensureAllTablesExist() {
        System.out.println("Ensuring database tables exist...");
        ensureUsersTableExists(); //create user tables
        ensureStatsTableExists(); //create stats table
        ensureGameHistoryTableExists(); //create game history table
        ensureLeaderboardViewExists(); //create leaderboard view
    }

    public void ensureUsersTableExists() {
        String createTableSQL = "CREATE TABLE USERS (" 
            + "USERNAME VARCHAR(50) PRIMARY KEY, " //primary key for users
            + "PASSWORD VARCHAR(50) NOT NULL, " //password 
            + "DATE_CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " //account creation date
            + "LAST_LOGIN TIMESTAMP DEFAULT CURRENT_TIMESTAMP)"; //last login timestamp
        
        executeSQL("USERS", createTableSQL); //execute table creation
    }

    public void ensureStatsTableExists() {
        String createTableSQL = "CREATE TABLE USER_STATS (" 
            + "USERNAME VARCHAR(50) PRIMARY KEY, " //primarty key linked to users
            + "GAMES_PLAYED INT DEFAULT 0, " //total games played
            + "GAMES_WON INT DEFAULT 0, " //total games won
            + "CURRENT_STREAK INT DEFAULT 0, " //current win streak
            + "BEST_STREAK INT DEFAULT 0, " //best win streak
            + "BLACKJACKS INT DEFAULT 0, " //total blackjacks
            + "BALANCE INT DEFAULT 1000, " //current balance
            + "TOTAL_WAGERED INT DEFAULT 0, " //total amount betted
            + "TOTAL_WON INT DEFAULT 0, " //total amount won
            + "FOREIGN KEY (USERNAME) REFERENCES USERS(USERNAME))"; //foreign key to users table
        
        executeSQL("USER_STATS", createTableSQL); //execute table creation
    }

    private void ensureGameHistoryTableExists() {
        String createTableSQL = "CREATE TABLE GAME_HISTORY ("
            + "GAME_ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY, " //auto increment game id
            + "USERNAME VARCHAR(50) NOT NULL, " //player username
            + "BET_AMOUNT INT NOT NULL, " //bet amount for game
            + "PLAYER_SCORE INT NOT NULL, " //player final score
            + "DEALER_SCORE INT NOT NULL, " //dealer final score
            + "PLAYER_CARDS VARCHAR(100) NOT NULL, " //player cards as string
            + "DEALER_CARDS VARCHAR(100) NOT NULL, " //dealer cards as string
            + "RESULT VARCHAR(20) NOT NULL, " //game result 
            + "HAD_BLACKJACK BOOLEAN DEFAULT FALSE, " //whether player had blackjack
            + "BALANCE_BEFORE INT NOT NULL, " //balance before game
            + "BALANCE_AFTER INT NOT NULL, " //balance after game
            + "GAME_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " //when game was played
            + "FOREIGN KEY (USERNAME) REFERENCES USERS(USERNAME))"; //foreign key to users
        
        executeSQL("GAME_HISTORY", createTableSQL); //execute table creation
    }

    private void ensureLeaderboardViewExists() {
        try {
            DatabaseMetaData dbm = conn.getMetaData();
            ResultSet tables = dbm.getTables(null, null, "PLAYER_LEADERBOARD", null);
            if (!tables.next()) {
                try (Statement st = conn.createStatement()) {
                    st.executeUpdate("CREATE VIEW PLAYER_LEADERBOARD AS "
                        + "SELECT USERNAME, BALANCE, GAMES_PLAYED, GAMES_WON, "
                        + "CASE WHEN GAMES_PLAYED > 0 THEN (GAMES_WON * 100.0 / GAMES_PLAYED) ELSE 0 END AS WIN_RATE, "
                        + "BLACKJACKS, BEST_STREAK, TOTAL_WAGERED, TOTAL_WON "
                        + "FROM USER_STATS "
                        + "WHERE GAMES_PLAYED > 0 " //only include players who have played
                        + "ORDER BY BALANCE DESC, WIN_RATE DESC"); //sort by balance then win rate
                    System.out.println("PLAYER_LEADERBOARD view created successfully.");
                }
            }
        } catch (SQLException e) {
            System.out.println("LEADERBOARD view check error: " + e.getMessage());
        }
    }

    private void executeSQL(String tableName, String sql) {
        try {
            DatabaseMetaData dbm = conn.getMetaData();
            ResultSet tables = dbm.getTables(null, null, tableName, null);
            
            if (!tables.next()) { //if table doesnt exist
                try (Statement stmt = conn.createStatement()) {
                    stmt.executeUpdate(sql); //create the table
                    System.out.println("Table created: " + tableName);
                }
            } else {
                System.out.println("Table exists: " + tableName);
            }
        } catch (SQLException e) {
            System.out.println("Error with table " + tableName + ": " + e.getMessage());
        }
    }

    private void testDatabase() {
        try {
            System.out.println("Testing database functionality...");
            
            // Test basic query
            try (Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery("SELECT COUNT(*) AS user_count FROM USERS")) {
                if (rs.next()) {
                    System.out.println("Database test passed - Users count: " + rs.getInt("user_count"));
                }
            }
        } catch (SQLException e) {
            System.out.println("Database test failed: " + e.getMessage());
        }
    }

    private void showErrorDialog(String message) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                JOptionPane.showMessageDialog(null, 
                    message,
                    "Database Error", 
                    JOptionPane.ERROR_MESSAGE); //show error dialog
            }
        });
    }

    //user creation
    public boolean registerUser(String username, String password) {
        if (username == null || username.trim().isEmpty() || password == null || password.trim().isEmpty()) {
            System.out.println("Registration failed: Empty username or password");
            return false;
        }
        
        String trimmedUsername = username.trim();
        String trimmedPassword = password.trim();
        
        System.out.println("Attempting to register user: '" + trimmedUsername + "'");
        
        // Check if user already exists
        if (userExists(trimmedUsername)) {
            System.out.println("User already exists: " + trimmedUsername);
            return false;
        }
        
        String insertUser = "INSERT INTO USERS (USERNAME, PASSWORD) VALUES (?, ?)"; //insert user sql
        String insertStats = "INSERT INTO USER_STATS (USERNAME) VALUES (?)"; //insert stats sql
        
        try {
            conn.setAutoCommit(false); //start transaction
            
            try (PreparedStatement userStmt = conn.prepareStatement(insertUser);
                 PreparedStatement statsStmt = conn.prepareStatement(insertStats)) {
                
                //insert user
                userStmt.setString(1, trimmedUsername);
                userStmt.setString(2, trimmedPassword);
                userStmt.executeUpdate();
                
                //insert stats
                statsStmt.setString(1, trimmedUsername);
                statsStmt.executeUpdate();
                
                conn.commit(); //commit transaction
                System.out.println("User registered successfully: " + trimmedUsername);
                return true;
                
            } catch (SQLException e) { 
                conn.rollback(); //rollback on error
                System.out.println("Registration failed: " + e.getMessage());
                return false;
            } finally {
                conn.setAutoCommit(true); //reset autocommit
            }
            
        } catch (SQLException e) {
            System.out.println("Transaction error: " + e.getMessage());
            return false;
        }
    }

    public boolean userExists(String username) { 
        if (username == null || username.trim().isEmpty()) {
            return false;
        }
        
        String sql = "SELECT USERNAME FROM USERS WHERE USERNAME = ?"; //checks user existence sql
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, username.trim());
            ResultSet rs = ps.executeQuery();
            return rs.next(); //return true if user exists
        } catch (SQLException e) {
            System.out.println("User existence check failed: " + e.getMessage());
            return false;
        }
    }
    public boolean isDatabaseConnected() {
        try {
            return conn != null && !conn.isClosed() && conn.isValid(2);
        } catch (SQLException e) {
            return false;
        }
    }

    public boolean validateUser(String username, String password) {
        if (username == null || username.trim().isEmpty() || password == null || password.trim().isEmpty()) {
            return false;
        }
        
        String sql = "SELECT USERNAME FROM USERS WHERE USERNAME = ? AND PASSWORD = ?"; //login validation sql
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, username.trim());
            ps.setString(2, password.trim());
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                updateLastLogin(username); //update last login time
                System.out.println("Login successful: " + username);
                return true;
            }
        } catch (SQLException e) {
            System.out.println("Login validation failed: " + e.getMessage());
        }
        return false;
    }
    public void debugDatabaseInfo() {
    try {
        System.out.println("=== DATABASE INFO ===");
        System.out.println("Connection URL: " + URL);
        System.out.println("Username: " + USER_NAME);
        
        if (conn != null) {
            DatabaseMetaData meta = conn.getMetaData();
            System.out.println("Database: " + meta.getDatabaseProductName());
            System.out.println("URL from connection: " + meta.getURL());
            
            // Check actual database location
            try (Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery("VALUES (CURRENT SCHEMA)")) {
                if (rs.next()) {
                    System.out.println("Current Schema: " + rs.getString(1));
                }
            }
        }
        System.out.println("=====================");
    } catch (SQLException e) {
        System.out.println("Debug info failed: " + e.getMessage());
    }
}

    private void updateLastLogin(String username) {
        String sql = "UPDATE USERS SET LAST_LOGIN = CURRENT_TIMESTAMP WHERE USERNAME = ?"; //update last login sql
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, username);
            ps.executeUpdate();
        } catch (SQLException e) {
            System.out.println("Failed to update last login: " + e.getMessage());
        }
    }

    //close connections properly
    public void closeConnections() {
        shutdown(); //use the new shutdown method
    }

  
    public int getUserBalance(String username) {
        //first check if database is connected
        if (!isDatabaseConnected()) {
            System.err.println("Database not connected - cannot get balance for: " + username);
            return -1; //return -1 to indicate connection failure
        }

        String sql = "SELECT BALANCE FROM USER_STATS WHERE USERNAME = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, username);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                int balance = rs.getInt("BALANCE");
                System.out.println("Retrieved balance from DB for " + username + ": $" + balance);
                return balance;
            } else {
                System.out.println("No user stats found for: " + username);
                return 1000; //default starting balance
            }
        } catch (SQLException e) {
            System.out.println("Failed to get user balance: " + e.getMessage());
            return -1; //return -1 to indicate error
        }
    }

    public void updateUserBalance(String username, int newBalance) {
        String sql = "UPDATE USER_STATS SET BALANCE = ? WHERE USERNAME = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, newBalance);
            ps.setString(2, username);
            ps.executeUpdate();
            System.out.println("Updated balance for " + username + " to: $" + newBalance);
        } catch (SQLException e) {
            System.out.println("Failed to update user balance: " + e.getMessage());
        }
    }

    public void updateUserStats(String username, boolean gameWon, int newBalance, boolean hadBlackjack, int betAmount) {
        String sql = "UPDATE USER_STATS SET "
                   + "GAMES_PLAYED = GAMES_PLAYED + 1, " //increment games played
                   + "GAMES_WON = GAMES_WON + ?, " //increment wins if won
                   + "CURRENT_STREAK = CASE WHEN ? = 1 THEN CURRENT_STREAK + 1 ELSE 0 END, " //update streak
                   + "BEST_STREAK = CASE WHEN ? = 1 AND CURRENT_STREAK + 1 > BEST_STREAK THEN CURRENT_STREAK + 1 ELSE BEST_STREAK END, " //update best streak
                   + "BLACKJACKS = BLACKJACKS + ?, " //increment blackjack count
                   + "TOTAL_WAGERED = TOTAL_WAGERED + ?, " //add to total wagered
                   + "TOTAL_WON = TOTAL_WON + ?, " //add to total won
                   + "BALANCE = ? " //update balance
                   + "WHERE USERNAME = ?";

        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            int winValue = gameWon ? 1 : 0; //1 if won, 0 if lost
            int blackjackValue = hadBlackjack ? 1 : 0; //1 if blackjack, 0 if not
            int winnings = gameWon ? (hadBlackjack ? (int)(betAmount * 1.5) : betAmount) : 0; //calculate winnings

            ps.setInt(1, winValue);
            ps.setInt(2, winValue);
            ps.setInt(3, winValue);
            ps.setInt(4, blackjackValue);
            ps.setInt(5, betAmount);
            ps.setInt(6, winnings);
            ps.setInt(7, newBalance);
            ps.setString(8, username);

            int rowsUpdated = ps.executeUpdate();

            System.out.println("DATABASE UPDATE DETAILS:");
            System.out.println("   - User: " + username);
            System.out.println("   - Game Won: " + gameWon);
            System.out.println("   - Had Blackjack: " + hadBlackjack);
            System.out.println("   - Blackjack Increment: " + blackjackValue);
            System.out.println("   - Bet Amount: $" + betAmount);
            System.out.println("   - New Balance: $" + newBalance);
            System.out.println("   - Rows Updated: " + rowsUpdated);
            System.out.println("Updated comprehensive stats for " + username);

        } catch (SQLException e) {
            System.out.println("Failed to update user stats: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void logGameHistory(String username, int betAmount, int playerScore, int dealerScore, 
                             String playerCards, String dealerCards, String result, 
                             boolean hadBlackjack, int balanceBefore, int balanceAfter) {
        String sql = "INSERT INTO GAME_HISTORY (USERNAME, BET_AMOUNT, PLAYER_SCORE, DEALER_SCORE, "
                   + "PLAYER_CARDS, DEALER_CARDS, RESULT, HAD_BLACKJACK, BALANCE_BEFORE, BALANCE_AFTER) "
                   + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"; //insert game history sql
        
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, username);
            ps.setInt(2, betAmount);
            ps.setInt(3, playerScore);
            ps.setInt(4, dealerScore);
            ps.setString(5, playerCards);
            ps.setString(6, dealerCards);
            ps.setString(7, result);
            ps.setBoolean(8, hadBlackjack);
            ps.setInt(9, balanceBefore);
            ps.setInt(10, balanceAfter);
            
            ps.executeUpdate(); //insert game record
            System.out.println("Logged game history for " + username + ": " + result);
        } catch (SQLException e) {
            System.out.println("Failed to log game history: " + e.getMessage());
        }
    }

    //get game history for a user
    public List<GameRecord> getGameHistory(String username, int limit) {
        List<GameRecord> history = new ArrayList<>();
        String sql = "SELECT BET_AMOUNT, PLAYER_SCORE, DEALER_SCORE, PLAYER_CARDS, DEALER_CARDS, "
                   + "RESULT, HAD_BLACKJACK, BALANCE_BEFORE, BALANCE_AFTER, GAME_TIMESTAMP "
                   + "FROM GAME_HISTORY WHERE USERNAME = ? ORDER BY GAME_TIMESTAMP DESC FETCH FIRST ? ROWS ONLY"; //get game history sql
        
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, username);
            ps.setInt(2, limit);
            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {
                GameRecord record = new GameRecord( //create game record object
                    rs.getInt("BET_AMOUNT"),
                    rs.getInt("PLAYER_SCORE"),
                    rs.getInt("DEALER_SCORE"),
                    rs.getString("PLAYER_CARDS"),
                    rs.getString("DEALER_CARDS"),
                    rs.getString("RESULT"),
                    rs.getBoolean("HAD_BLACKJACK"),
                    rs.getInt("BALANCE_BEFORE"),
                    rs.getInt("BALANCE_AFTER"),
                    rs.getTimestamp("GAME_TIMESTAMP")
                );
                history.add(record); //add to history list
            }
        } catch (SQLException e) {
            System.out.println("Failed to get game history: " + e.getMessage());
        }
        return history;
    }

    public List<PlayerStats> getTopPlayersByBalance(int limit) {
        List<PlayerStats> leaders = new ArrayList<>();
        String sql = "SELECT USERNAME, BALANCE, GAMES_PLAYED, GAMES_WON, WIN_RATE, BLACKJACKS, BEST_STREAK "
                   + "FROM PLAYER_LEADERBOARD FETCH FIRST ? ROWS ONLY"; //get leaderboard sql
        
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, limit);
            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {
                PlayerStats stats = new PlayerStats( //create player stats object
                    rs.getString("USERNAME"),
                    rs.getInt("BALANCE"),
                    rs.getInt("GAMES_PLAYED"),
                    rs.getInt("GAMES_WON"),
                    rs.getDouble("WIN_RATE"),
                    rs.getInt("BLACKJACKS"),
                    rs.getInt("BEST_STREAK")
                );
                leaders.add(stats); //add to leaders list
            }
        } catch (SQLException e) {
            System.out.println("Failed to get leaderboard: " + e.getMessage());
        }
        return leaders;
    }

    //get player analytics
    public PlayerAnalytics getPlayerAnalytics(String username) {
        String sql = "SELECT GAMES_PLAYED, GAMES_WON, BLACKJACKS, BEST_STREAK, TOTAL_WAGERED, TOTAL_WON, BALANCE "
                   + "FROM USER_STATS WHERE USERNAME = ?";
        
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, username);
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                return new PlayerAnalytics( //create analytics object
                    rs.getInt("GAMES_PLAYED"),
                    rs.getInt("GAMES_WON"),
                    rs.getInt("BLACKJACKS"),
                    rs.getInt("BEST_STREAK"),
                    rs.getInt("TOTAL_WAGERED"),
                    rs.getInt("TOTAL_WON"),
                    rs.getInt("BALANCE")
                );
            }
        } catch (SQLException e) {
            System.out.println("Failed to get player analytics: " + e.getMessage());
        }
        return null;
    }

    public Stats getUserStats(String username) {
        String sql = "SELECT GAMES_PLAYED, GAMES_WON, BLACKJACKS, BALANCE FROM USER_STATS WHERE USERNAME = ?"; //get basic stats sql
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, username);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                int gamesPlayed = rs.getInt("GAMES_PLAYED");
                int wins = rs.getInt("GAMES_WON");
                int losses = gamesPlayed - wins; //calculate losses
                int blackjacks = rs.getInt("BLACKJACKS");
                int balance = rs.getInt("BALANCE");
                
                return new Stats(gamesPlayed, wins, losses, blackjacks, balance); //return stats object
            }
        } catch (SQLException e) {
            System.out.println("Failed to get user stats: " + e.getMessage());
        }
        return new Stats(0, 0, 0, 0, 1000); //default stats if user not found
    }

    public void printDatabaseStats() {
        try (Statement stmt = conn.createStatement()) {
            //count users
            ResultSet rs = stmt.executeQuery("SELECT COUNT(*) AS USER_COUNT FROM USERS");
            if (rs.next()) {
                System.out.println("Total users in database: " + rs.getInt("USER_COUNT"));
            }
            
            //count game history records
            rs = stmt.executeQuery("SELECT COUNT(*) AS GAME_COUNT FROM GAME_HISTORY");
            if (rs.next()) {
                System.out.println("Total games recorded: " + rs.getInt("GAME_COUNT"));
            }
            
        } catch (SQLException e) {
            System.out.println("Failed to get database stats: " + e.getMessage());
        }
    }

    //data transfer object for game records
    public static class GameRecord {
        private final int betAmount, playerScore, dealerScore, balanceBefore, balanceAfter;
        private final String playerCards, dealerCards, result;
        private final boolean hadBlackjack;
        private final Timestamp timestamp;
        
        public GameRecord(int betAmount, int playerScore, int dealerScore, String playerCards, 
                         String dealerCards, String result, boolean hadBlackjack, 
                         int balanceBefore, int balanceAfter, Timestamp timestamp) {
            this.betAmount = betAmount;
            this.playerScore = playerScore;
            this.dealerScore = dealerScore;
            this.playerCards = playerCards;
            this.dealerCards = dealerCards;
            this.result = result;
            this.hadBlackjack = hadBlackjack;
            this.balanceBefore = balanceBefore;
            this.balanceAfter = balanceAfter;
            this.timestamp = timestamp;
        }
        
        //getters for game record data
        public int getBetAmount() {
            return betAmount; 
        }
        
        
        public int getPlayerScore() { 
            return playerScore; 
        }
        
        
        public int getDealerScore() {
            return dealerScore;
        }
        
        
        public String getPlayerCards() {
            return playerCards; 
        }
        
        
        public String getDealerCards() {
            return dealerCards; 
        }
        
        
        public String getResult() { 
            return result; 
        }
        
        
        public boolean hadBlackjack() { 
            return hadBlackjack; 
        }
        
        
        public int getBalanceBefore() {
            return balanceBefore; 
        }
        
        
        public int getBalanceAfter() {
            return balanceAfter; 
        }
        
        
        public Timestamp getTimestamp() {
            return timestamp;
        }
    }

    
    //data transfer object for player stats
    public static class PlayerStats {
        private final String username;
        private final int balance, gamesPlayed, gamesWon, blackjacks, bestStreak;
        private final double winRate;
        
        public PlayerStats(String username, int balance, int gamesPlayed, 
                int gamesWon, double winRate, int blackjacks, int bestStreak) {
            this.username = username;
            this.balance = balance;
            this.gamesPlayed = gamesPlayed;
            this.gamesWon = gamesWon;
            this.winRate = winRate;
            this.blackjacks = blackjacks;
            this.bestStreak = bestStreak;
        }
        
        //getters for player stats
        public String getUsername() { 
            return username; 
        }
        
        
        public int getBalance() { 
            return balance; 
        }
        
        
        public int getGamesPlayed() {
            return gamesPlayed;
        }
        
        
        public int getGamesWon() { 
            return gamesWon;
        }
        
        
        public double getWinRate() { 
            return winRate;
        }
        
        
        public int getBlackjacks() { 
            return blackjacks;
        }
        
        
        public int getBestStreak() { 
            return bestStreak;
        }
    }
    
    
    //data transfer object for detailed player analytics
    public static class PlayerAnalytics {
        private final int gamesPlayed, gamesWon, blackjacks, bestStreak, totalWagered, totalWon, balance;
        
        public PlayerAnalytics(int gamesPlayed, int gamesWon, int blackjacks, int bestStreak, 
                              int totalWagered, int totalWon, int balance) {
            this.gamesPlayed = gamesPlayed;
            this.gamesWon = gamesWon;
            this.blackjacks = blackjacks;
            this.bestStreak = bestStreak;
            this.totalWagered = totalWagered;
            this.totalWon = totalWon;
            this.balance = balance;
        }
        
        //getters for player analytics
        public int getGamesPlayed() { 
            return gamesPlayed;
        }
        
        
        public int getGamesWon() { 
            return gamesWon;
        }
        
        
        public int getBlackjacks() {
            return blackjacks; 
        }
        
        
        public int getBestStreak() {
            return bestStreak;
        }
        
        
        public int getTotalWagered() { 
            return totalWagered;
        }
        
        
        public int getTotalWon() { 
            return totalWon;
        }
        
        
        public int getBalance() { 
            return balance; 
        }
        
        
        public double getProfitLoss() { 
            return totalWon - totalWagered; //calculate net profit/loss
        }
        
        
        public double getWinRate() { 
            return gamesPlayed > 0 ? (gamesWon * 100.0 / gamesPlayed) : 0; //calculate win percentage
        }
    }
}